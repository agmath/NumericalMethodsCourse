---
title: "MAT 370: Introduction and What to Expect"
author: Dr. Gilbert
format: 
  revealjs:
    smaller: true
date: today
date-format: long
theme: serif
incremental: true
---

```{r global-options, include=FALSE}
library(tidyverse)
library(reticulate)

theme_set(theme_bw(base_size = 20))
```

```{python}
import numpy as np
import matplotlib.pyplot as plt
```

```{css}
code.sourceCode {
  font-size: 1.3em;
  /* or try font-size: xx-large; */
}

a {
  color: purple;
}

a:link {
  color: purple;
}

a:visited {
  color: purple;
}
```

## What Are We Here For?

. . .

```{python}
#| echo: false
#| message: false

np.random.seed(123)

x1_vals = np.linspace(-10, 15, 200)
sys1_x2_vals1 = (13 - 5*x1_vals)/2
sys1_x2_vals2 = (11 - 3*x1_vals)/(-2)

sys2_x2_vals1 = (10 - 2*x1_vals)/4
sys2_x2_vals2 = (15 - 4*x1_vals)/8

sys3_x2_vals1 = (10 - 2*x1_vals)/4
sys3_x2_vals2 = (-20 + 4*x1_vals)/(-8)

plt.figure(figsize = (15, 9))
plt.subplot(2, 3, 1)
plt.plot(x1_vals, sys1_x2_vals1, color = "red")
plt.plot(x1_vals, sys1_x2_vals2, color = "purple")
plt.grid()
plt.axhline(0, color='black', linewidth=0.5)
plt.axvline(0, color='black', linewidth=0.5)
plt.xlabel("x_1")
plt.ylabel("x_2")


plt.show()
```

## What Are We Here For?

```{python}
#| echo: false
#| message: false

np.random.seed(123)

x1_vals = np.linspace(-10, 15, 200)
sys1_x2_vals1 = (13 - 5*x1_vals)/2
sys1_x2_vals2 = (11 - 3*x1_vals)/(-2)

sys2_x2_vals1 = (10 - 2*x1_vals)/4
sys2_x2_vals2 = (15 - 4*x1_vals)/8

sys3_x2_vals1 = (10 - 2*x1_vals)/4
sys3_x2_vals2 = (-20 + 4*x1_vals)/(-8)

plt.figure(figsize = (15, 9))
plt.subplot(2, 3, 1)
plt.plot(x1_vals, sys1_x2_vals1, color = "red")
plt.plot(x1_vals, sys1_x2_vals2, color = "purple")

plt.grid()
plt.axhline(0, color='black', linewidth=0.5)
plt.axvline(0, color='black', linewidth=0.5)
plt.xlabel("x_1")
plt.ylabel("x_2")

plt.subplot(2, 3, 2)
x_vals = np.random.uniform(0, 10, 4)
y_vals = (x_vals-4)*(x_vals-7)**2

x_new = np.linspace(0, 10, 100)
y_interp = (x_new - 4)*(x_new - 7)**2
lin_fit = np.polyfit(x_vals, y_vals, deg = 1)
lin_fit_fn = np.poly1d(lin_fit)
y_fit = lin_fit_fn(x_new)

plt.scatter(x_vals, y_vals)
plt.plot(x_new, y_interp, color = "red")
plt.plot(x_new, y_fit, color = "green")
plt.xlabel("x")
plt.ylabel("y")

plt.axhline(y = 0, color = "black")
plt.axvline(x = 0, color = "black")

plt.ylim((-100, 50));
plt.grid()

plt.show()
```

## What Are We Here For?

```{python}
#| echo: false
#| message: false

np.random.seed(123)

x1_vals = np.linspace(-10, 15, 200)
sys1_x2_vals1 = (13 - 5*x1_vals)/2
sys1_x2_vals2 = (11 - 3*x1_vals)/(-2)

sys2_x2_vals1 = (10 - 2*x1_vals)/4
sys2_x2_vals2 = (15 - 4*x1_vals)/8

sys3_x2_vals1 = (10 - 2*x1_vals)/4
sys3_x2_vals2 = (-20 + 4*x1_vals)/(-8)

plt.figure(figsize = (15, 9))
plt.subplot(2, 3, 1)
plt.plot(x1_vals, sys1_x2_vals1, color = "red")
plt.plot(x1_vals, sys1_x2_vals2, color = "purple")

plt.grid()
plt.axhline(0, color='black', linewidth=0.5)
plt.axvline(0, color='black', linewidth=0.5)
plt.xlabel("x_1")
plt.ylabel("x_2")

plt.subplot(2, 3, 2)
x_vals = np.random.uniform(0, 10, 4)
y_vals = (x_vals-4)*(x_vals-7)**2

x_new = np.linspace(0, 10, 100)
y_interp = (x_new - 4)*(x_new - 7)**2
lin_fit = np.polyfit(x_vals, y_vals, deg = 1)
lin_fit_fn = np.poly1d(lin_fit)
y_fit = lin_fit_fn(x_new)

plt.scatter(x_vals, y_vals)
plt.plot(x_new, y_interp, color = "red")
plt.plot(x_new, y_fit, color = "green")
plt.xlabel("x")
plt.ylabel("y")

plt.axhline(y = 0, color = "black")
plt.axvline(x = 0, color = "black")

plt.ylim((-100, 50));
plt.grid()

plt.subplot(2, 3, 3)
x_vals = np.linspace(0, 10, 250)
y1_vals = np.sin(x_vals)
y2_vals = np.sin(5*x_vals)
y3_vals = np.tan(x_vals)

x0 = 2
y0 = np.sin(x0)
x1 = 4
y1 = np.sin(x1)

plt.plot(x_vals, y1_vals, color = "purple")
plt.scatter([x0, x1], [y0, y1], color = "black", s = 100)
plt.xlabel("x")
plt.ylabel("y")

plt.grid()
plt.axhline(y = 0, color = "black")
plt.axvline(x = 0, color = "black")


plt.show()
```

## What Are We Here For?

```{python}
#| echo: false
#| message: false

np.random.seed(123)

x1_vals = np.linspace(-10, 15, 200)
sys1_x2_vals1 = (13 - 5*x1_vals)/2
sys1_x2_vals2 = (11 - 3*x1_vals)/(-2)

sys2_x2_vals1 = (10 - 2*x1_vals)/4
sys2_x2_vals2 = (15 - 4*x1_vals)/8

sys3_x2_vals1 = (10 - 2*x1_vals)/4
sys3_x2_vals2 = (-20 + 4*x1_vals)/(-8)

plt.figure(figsize = (15, 9))
plt.subplot(2, 3, 1)
plt.plot(x1_vals, sys1_x2_vals1, color = "red")
plt.plot(x1_vals, sys1_x2_vals2, color = "purple")

plt.grid()
plt.axhline(0, color='black', linewidth=0.5)
plt.axvline(0, color='black', linewidth=0.5)
plt.xlabel("x_1")
plt.ylabel("x_2")

plt.subplot(2, 3, 2)
x_vals = np.random.uniform(0, 10, 4)
y_vals = (x_vals-4)*(x_vals-7)**2

x_new = np.linspace(0, 10, 100)
y_interp = (x_new - 4)*(x_new - 7)**2
lin_fit = np.polyfit(x_vals, y_vals, deg = 1)
lin_fit_fn = np.poly1d(lin_fit)
y_fit = lin_fit_fn(x_new)

plt.scatter(x_vals, y_vals)
plt.plot(x_new, y_interp, color = "red")
plt.plot(x_new, y_fit, color = "green")
plt.xlabel("x")
plt.ylabel("y")

plt.axhline(y = 0, color = "black")
plt.axvline(x = 0, color = "black")

plt.ylim((-100, 50));
plt.grid()

plt.subplot(2, 3, 3)
x_vals = np.linspace(0, 10, 250)
y1_vals = np.sin(x_vals)
y2_vals = np.sin(5*x_vals)
y3_vals = np.tan(x_vals)

x0 = 2
y0 = np.sin(x0)
x1 = 4
y1 = np.sin(x1)

plt.plot(x_vals, y1_vals, color = "purple")
plt.scatter([x0, x1], [y0, y1], color = "black", s = 100)
plt.xlabel("x")
plt.ylabel("y")

plt.grid()
plt.axhline(y = 0, color = "black")
plt.axvline(x = 0, color = "black")

plt.subplot(2, 3, 4)
x_vals = np.linspace(0, 10, 500)
y_vals = x_vals*np.sin(x_vals)

x0 = 6
y0 = x0*np.sin(x0)

m1 = x0*np.cos(x0) + np.sin(x0)
m2 = -x0*np.sin(x0) + 2*np.cos(x0)
m3 = -x0*np.cos(x0) - 3*np.sin(x0) 

d1_vals = m1*(x_vals - x0) + y0
d2_vals = m2*(x_vals - x0)**2/2 + m1*(x_vals - x0) + y0
d3_vals = m3*(x_vals - x0)**3/6 + m2*(x_vals - x0)**2/2 + m1*(x_vals - x0) + y0

plt.plot(x_vals, y_vals)
plt.plot(x_vals, d1_vals, color = "green", ls = "--")
plt.plot(x_vals, d2_vals, color = "orange", ls = "--")
plt.plot(x_vals, d3_vals, color = "red", ls = "--")
plt.scatter(x0, y0, color = "black", s = 100)
plt.grid()
plt.axvline(x = 0, color = "black")
plt.axhline(y = 0, color = "black")
plt.xlabel("x")
plt.ylabel("y")
plt.ylim((-10, 10));

plt.show()
```

## What Are We Here For?

```{python}
#| echo: false
#| message: false

np.random.seed(123)

x1_vals = np.linspace(-10, 15, 200)
sys1_x2_vals1 = (13 - 5*x1_vals)/2
sys1_x2_vals2 = (11 - 3*x1_vals)/(-2)

sys2_x2_vals1 = (10 - 2*x1_vals)/4
sys2_x2_vals2 = (15 - 4*x1_vals)/8

sys3_x2_vals1 = (10 - 2*x1_vals)/4
sys3_x2_vals2 = (-20 + 4*x1_vals)/(-8)

plt.figure(figsize = (15, 9))
plt.subplot(2, 3, 1)
plt.plot(x1_vals, sys1_x2_vals1, color = "red")
plt.plot(x1_vals, sys1_x2_vals2, color = "purple")

plt.grid()
plt.axhline(0, color='black', linewidth=0.5)
plt.axvline(0, color='black', linewidth=0.5)
plt.xlabel("x_1")
plt.ylabel("x_2")

plt.subplot(2, 3, 2)
x_vals = np.random.uniform(0, 10, 4)
y_vals = (x_vals-4)*(x_vals-7)**2

x_new = np.linspace(0, 10, 100)
y_interp = (x_new - 4)*(x_new - 7)**2
lin_fit = np.polyfit(x_vals, y_vals, deg = 1)
lin_fit_fn = np.poly1d(lin_fit)
y_fit = lin_fit_fn(x_new)

plt.scatter(x_vals, y_vals)
plt.plot(x_new, y_interp, color = "red")
plt.plot(x_new, y_fit, color = "green")
plt.xlabel("x")
plt.ylabel("y")
plt.grid()

plt.axhline(y = 0, color = "black")
plt.axvline(x = 0, color = "black")

plt.ylim((-100, 50));

plt.subplot(2, 3, 3)
x_vals = np.linspace(0, 10, 250)
y1_vals = np.sin(x_vals)
y2_vals = np.sin(5*x_vals)
y3_vals = np.tan(x_vals)

x0 = 2
y0 = np.sin(x0)
x1 = 4
y1 = np.sin(x1)

plt.plot(x_vals, y1_vals, color = "purple")
plt.scatter([x0, x1], [y0, y1], color = "black", s = 100)
plt.xlabel("x")
plt.ylabel("y")

plt.grid()
plt.axhline(y = 0, color = "black")
plt.axvline(x = 0, color = "black")

plt.subplot(2, 3, 4)
#@title
x_vals = np.linspace(0, 10, 500)
y_vals = x_vals*np.sin(x_vals)

x0 = 6
y0 = x0*np.sin(x0)

m1 = x0*np.cos(x0) + np.sin(x0)
m2 = -x0*np.sin(x0) + 2*np.cos(x0)
m3 = -x0*np.cos(x0) - 3*np.sin(x0) 

d1_vals = m1*(x_vals - x0) + y0
d2_vals = m2*(x_vals - x0)**2/2 + m1*(x_vals - x0) + y0
d3_vals = m3*(x_vals - x0)**3/6 + m2*(x_vals - x0)**2/2 + m1*(x_vals - x0) + y0

plt.plot(x_vals, y_vals)
plt.plot(x_vals, d1_vals, color = "green", ls = "--")
plt.plot(x_vals, d2_vals, color = "orange", ls = "--")
plt.plot(x_vals, d3_vals, color = "red", ls = "--")
plt.scatter(x0, y0, color = "black", s = 100)
plt.grid()
plt.axvline(x = 0, color = "black")
plt.axhline(y = 0, color = "black")
plt.xlabel("x")
plt.ylabel("y")

plt.ylim((-10, 10));

plt.subplot(2, 3, 5)
x_vals = np.linspace(0, 10, 500)
y_vals = x_vals + np.sin(2*x_vals)

x_abscissas = np.linspace(0, 10, 10)
y_abscissas = x_abscissas + np.sin(2*x_abscissas)

plt.plot(x_vals, y_vals, color = "purple")
plt.plot(x_abscissas, y_abscissas, color = "red")
plt.fill_between(x_abscissas, y_abscissas, color = "red", alpha = 0.2)
plt.scatter(x_abscissas, y_abscissas, color = "red", s = 25)
plt.vlines(x = x_abscissas, ymin = 0, ymax= y_abscissas, color = "red", ls = "--")
plt.grid()
plt.axvline(x = 0, color = "black")
plt.axhline(y = 0, color = "black")
plt.xlabel("x")
plt.ylabel("y")

plt.show()
```

## What Are We Here For?

```{python}
#| echo: false
#| message: false

np.random.seed(123)

x1_vals = np.linspace(-10, 15, 200)
sys1_x2_vals1 = (13 - 5*x1_vals)/2
sys1_x2_vals2 = (11 - 3*x1_vals)/(-2)

sys2_x2_vals1 = (10 - 2*x1_vals)/4
sys2_x2_vals2 = (15 - 4*x1_vals)/8

sys3_x2_vals1 = (10 - 2*x1_vals)/4
sys3_x2_vals2 = (-20 + 4*x1_vals)/(-8)

plt.figure(figsize = (15, 9))
plt.subplot(2, 3, 1)
plt.plot(x1_vals, sys1_x2_vals1, color = "red")
plt.plot(x1_vals, sys1_x2_vals2, color = "purple")

plt.grid()
plt.axhline(0, color='black', linewidth=0.5)
plt.axvline(0, color='black', linewidth=0.5)
plt.xlabel("x_1")
plt.ylabel("x_2")

plt.subplot(2, 3, 2)
x_vals = np.random.uniform(0, 10, 4)
y_vals = (x_vals-4)*(x_vals-7)**2

x_new = np.linspace(0, 10, 100)
y_interp = (x_new - 4)*(x_new - 7)**2
lin_fit = np.polyfit(x_vals, y_vals, deg = 1)
lin_fit_fn = np.poly1d(lin_fit)
y_fit = lin_fit_fn(x_new)

plt.scatter(x_vals, y_vals)
plt.plot(x_new, y_interp, color = "red")
plt.plot(x_new, y_fit, color = "green")
plt.xlabel("x")
plt.ylabel("y")

plt.grid()
plt.axhline(y = 0, color = "black")
plt.axvline(x = 0, color = "black")

plt.ylim((-100, 50));

plt.subplot(2, 3, 3)
x_vals = np.linspace(0, 10, 250)
y1_vals = np.sin(x_vals)
y2_vals = np.sin(5*x_vals)
y3_vals = np.tan(x_vals)

x0 = 2
y0 = np.sin(x0)
x1 = 4
y1 = np.sin(x1)

plt.plot(x_vals, y1_vals, color = "purple")
plt.scatter([x0, x1], [y0, y1], color = "black", s = 100)
plt.xlabel("x")
plt.ylabel("y")

plt.grid()
plt.axhline(y = 0, color = "black")
plt.axvline(x = 0, color = "black")

plt.subplot(2, 3, 4)
#@title
x_vals = np.linspace(0, 10, 500)
y_vals = x_vals*np.sin(x_vals)

x0 = 6
y0 = x0*np.sin(x0)

m1 = x0*np.cos(x0) + np.sin(x0)
m2 = -x0*np.sin(x0) + 2*np.cos(x0)
m3 = -x0*np.cos(x0) - 3*np.sin(x0) 

d1_vals = m1*(x_vals - x0) + y0
d2_vals = m2*(x_vals - x0)**2/2 + m1*(x_vals - x0) + y0
d3_vals = m3*(x_vals - x0)**3/6 + m2*(x_vals - x0)**2/2 + m1*(x_vals - x0) + y0

plt.plot(x_vals, y_vals)
plt.plot(x_vals, d1_vals, color = "green", ls = "--")
plt.plot(x_vals, d2_vals, color = "orange", ls = "--")
plt.plot(x_vals, d3_vals, color = "red", ls = "--")
plt.scatter(x0, y0, color = "black", s = 100)
plt.grid()
plt.axvline(x = 0, color = "black")
plt.axhline(y = 0, color = "black")
plt.xlabel("x")
plt.ylabel("y")

plt.ylim((-10, 10));

plt.subplot(2, 3, 5)
x_vals = np.linspace(0, 10, 500)
y_vals = x_vals + np.sin(2*x_vals)

x_abscissas = np.linspace(0, 10, 10)
y_abscissas = x_abscissas + np.sin(2*x_abscissas)

plt.plot(x_vals, y_vals, color = "purple")
plt.plot(x_abscissas, y_abscissas, color = "red")
plt.fill_between(x_abscissas, y_abscissas, color = "red", alpha = 0.2)
plt.scatter(x_abscissas, y_abscissas, color = "red", s = 25)
plt.vlines(x = x_abscissas, ymin = 0, ymax= y_abscissas, color = "red", ls = "--")
plt.grid()
plt.axvline(x = 0, color = "black")
plt.axhline(y = 0, color = "black")
plt.xlabel("x")
plt.ylabel("y")

plt.subplot(2, 3, 6)
#@title
x, y = np.meshgrid(np.linspace(-5, 5, 15),
				np.linspace(-5, 5, 15))

def dy_dx(x, y):
  return np.sin(x - y)

# Directional vectors
v = dy_dx(x, y)
magnitude = np.sqrt(1 + v**2)
u = np.ones_like(v)

#y0 = [-2.75, 0.25]
#x_sol = np.linspace(-5, 5, 250)
#y_sol = solve_ivp(dy_dx, y0, x_sol).y

#print(y_sol)

# Plotting Slope Field with QUIVER
plt.quiver(x, y, u/magnitude, v/magnitude, color='purple', scale = 18)
#plt.plot(x_sol, y_sol, color = "green")
plt.xlabel("x")
plt.ylabel("y")

# Setting x, y boundary limits
plt.xlim(-5, 5);
plt.ylim(-5, 5);

# Show plot with grid
plt.grid()

plt.show()
```

## What Are We Here For?

```{python}
#| echo: false
#| message: false

np.random.seed(123)

x1_vals = np.linspace(-10, 15, 200)
sys1_x2_vals1 = (13 - 5*x1_vals)/2
sys1_x2_vals2 = (11 - 3*x1_vals)/(-2)

sys2_x2_vals1 = (10 - 2*x1_vals)/4
sys2_x2_vals2 = (15 - 4*x1_vals)/8

sys3_x2_vals1 = (10 - 2*x1_vals)/4
sys3_x2_vals2 = (-20 + 4*x1_vals)/(-8)

plt.figure(figsize = (15, 9))
plt.subplot(2, 3, 1)
plt.plot(x1_vals, sys1_x2_vals1, color = "red")
plt.plot(x1_vals, sys1_x2_vals2, color = "purple")

plt.grid()
plt.axhline(0, color='black', linewidth=0.5)
plt.axvline(0, color='black', linewidth=0.5)
plt.xlabel("x_1")
plt.ylabel("x_2")

plt.subplot(2, 3, 2)
x_vals = np.random.uniform(0, 10, 4)
y_vals = (x_vals-4)*(x_vals-7)**2

x_new = np.linspace(0, 10, 100)
y_interp = (x_new - 4)*(x_new - 7)**2
lin_fit = np.polyfit(x_vals, y_vals, deg = 1)
lin_fit_fn = np.poly1d(lin_fit)
y_fit = lin_fit_fn(x_new)

plt.scatter(x_vals, y_vals)
plt.plot(x_new, y_interp, color = "red")
plt.plot(x_new, y_fit, color = "green")
plt.xlabel("x")
plt.ylabel("y")

plt.grid()
plt.axhline(y = 0, color = "black")
plt.axvline(x = 0, color = "black")

plt.ylim((-100, 50));

plt.subplot(2, 3, 3)
x_vals = np.linspace(0, 10, 250)
y1_vals = np.sin(x_vals)
y2_vals = np.sin(5*x_vals)
y3_vals = np.tan(x_vals)

x0 = 2
y0 = np.sin(x0)
x1 = 4
y1 = np.sin(x1)

plt.plot(x_vals, y1_vals, color = "purple")
plt.scatter([x0, x1], [y0, y1], color = "black", s = 100)
plt.xlabel("x")
plt.ylabel("y")

plt.grid()
plt.axhline(y = 0, color = "black")
plt.axvline(x = 0, color = "black")

plt.subplot(2, 3, 4)
#@title
x_vals = np.linspace(0, 10, 500)
y_vals = x_vals*np.sin(x_vals)

x0 = 6
y0 = x0*np.sin(x0)

m1 = x0*np.cos(x0) + np.sin(x0)
m2 = -x0*np.sin(x0) + 2*np.cos(x0)
m3 = -x0*np.cos(x0) - 3*np.sin(x0) 

d1_vals = m1*(x_vals - x0) + y0
d2_vals = m2*(x_vals - x0)**2/2 + m1*(x_vals - x0) + y0
d3_vals = m3*(x_vals - x0)**3/6 + m2*(x_vals - x0)**2/2 + m1*(x_vals - x0) + y0

plt.plot(x_vals, y_vals)
plt.plot(x_vals, d1_vals, color = "green", ls = "--")
plt.plot(x_vals, d2_vals, color = "orange", ls = "--")
plt.plot(x_vals, d3_vals, color = "red", ls = "--")
plt.scatter(x0, y0, color = "black", s = 100)
plt.grid()
plt.axvline(x = 0, color = "black")
plt.axhline(y = 0, color = "black")
plt.xlabel("x")
plt.ylabel("y")

plt.ylim((-10, 10));

plt.subplot(2, 3, 5)
x_vals = np.linspace(0, 10, 500)
y_vals = x_vals + np.sin(2*x_vals)

x_abscissas = np.linspace(0, 10, 10)
y_abscissas = x_abscissas + np.sin(2*x_abscissas)

plt.plot(x_vals, y_vals, color = "purple")
plt.plot(x_abscissas, y_abscissas, color = "red")
plt.fill_between(x_abscissas, y_abscissas, color = "red", alpha = 0.2)
plt.scatter(x_abscissas, y_abscissas, color = "red", s = 25)
plt.vlines(x = x_abscissas, ymin = 0, ymax= y_abscissas, color = "red", ls = "--")
plt.grid()
plt.axvline(x = 0, color = "black")
plt.axhline(y = 0, color = "black")
plt.xlabel("x")
plt.ylabel("y")

plt.subplot(2, 3, 6)
#@title
x, y = np.meshgrid(np.linspace(-5, 5, 15),
				np.linspace(-5, 5, 15))

def dy_dx(x, y):
  return np.sin(x - y)

# Directional vectors
v = dy_dx(x, y)
magnitude = np.sqrt(1 + v**2)
u = np.ones_like(v)

#y0 = [-2.75, 0.25]
#x_sol = np.linspace(-5, 5, 250)
#y_sol = solve_ivp(dy_dx, y0, x_sol).y

#print(y_sol)

# Plotting Slope Field with QUIVER
plt.quiver(x, y, u/magnitude, v/magnitude, color='purple', scale = 18)
#plt.plot(x_sol, y_sol, color = "green")
plt.xlabel("x")
plt.ylabel("y")

# Setting x, y boundary limits
plt.xlim(-5, 5);
plt.ylim(-5, 5);

# Show plot with grid
plt.grid()

plt.suptitle("We'll Revisit PreCalculus Through Differential Equations", fontsize = 36)

plt.show()
```

## Syllabus

**Major Highlights from the Syllabus**: I'll ask you to read the syllabus, but the most important items are on the following slides.

## Instructor and Office Hours

  + Instructor: Dr. Adam Gilbert
  
    + e-mail address: [a.gilbert1@snhu.edu](mailto:a.gilbert1@snhu.edu)
    + Office: Robert Frost Hall, Room 311
    + Office Hours (please visit!): 
    
      + Tuesdays 11:00am - 12:30pm
      + Wednesdays 9:00am - 10:30am
      + Fridays 1:00pm - 3:00pm

## Required Resources

+ **Main Textbook:** We are following *Numerical Methods for Engineering with Python 3* by Jaan Kiusalaas
+ [Python via Google Colab](https://colab.research.google.com/) or a local Python installation is required (Colab recommended)

    + Note, I'll assume you've never seen Python before and that you haven't even written a single line of code. We'll start from the ground.
    + You'll also use $\LaTeX$ for typesetting mathematics, but I'll give you a primer in that as well.

## Grading Scheme

  <center> 
  Grade Item                     | Value
  -------------------------------|-----------
  Participation                  |  5%
  Homework (~8)                  | 40%
  Unit Problem Sets / Exams      | 40%
  Final Project and Reflection   | 15%
  </center>

## Explanations of Grade Items

+ **Participation:** Your collaboration in developing and implementing routines for solving problems is critical to our success in this course. You'll earn credit for that work.
+ **Homework:** We'll develop our routines in class together and you'll apply those routines to solving problems on homework assignments.

+ **Unit Problem Sets:** We will have two (2) unit problem sets (or exams) during our semester. 

    + These will stay unit problem sets unless unauthorized collaboration with AI, websites, or people becomes a problem. 
+ **Final Project and Reflection:** In the final weeks of the semester, you’ll complete a short project that combines reflection and application. 
  
    + Choose a numerical method we’ve studied and apply it to a meaningful problem in a domain you care about. 
    + Submit a short paper, a slide presentation, and give a brief (~7 – 10 minute) presentation explaining your work and what it means to you.

## Brightspace

+ Announcements
+ Assignment Submissions
+ Gradebook
+ Go to [the webpage](https://agmath.github.io/NumericalAnalysis.html) for everything else

## Course Webpage

I've built a [webpage to organize our course content](https://agmath.github.io/NumericalAnalysis.html).

+ Syllabus
+ Tentative timeline
  
  + Links to *notes* (in Jupyter/Colab notebook format)
  + Assignment reminders
  + Optional, but recommended, [3Blue1Brown](https://www.3blue1brown.com/) high-level overview videos

## What's Class Like?

+ Some lecture is going to be necessary here, but I hope it is collaborative
+ I have nearly complete sets of notes for you

    + The Python routines we need to build are scaffolded, with blanks for us to fill in
+ Generally, we'll spend class time slowly solving one problem, identifying the steps required to solve those problems, and then writing Python code to implement the solution strategy.
+ You'll use the functionality we develop in class on homework assignments and unit problem sets.

## A Note on Approach to Class

+ I'm open to change in all of my courses.
+ If the structure isn't working for you, let's chat and see what changes we can make to improve your experience.
+ If you don't want to tell me in person, leave an anonymous note under my office door.

. . .

My goal in this course is for all of you to learn as much about numerical methods as possible -- we can't achieve that if you don't feel like you are benefiting from our class meetings.

## Let's Get Our Hands Dirty!

. . .

**Reminder:** Complete the Week 1 Assignment on BrightSpace before the end of the day on Sunday!

<br/>
<br/>

<center>

Open our [Day 1 Notebook](https://colab.research.google.com/drive/1HI1jjQwaNEvCqhO0oB6G0poNf8U0xhAR?usp=share_link) and let's get started.

</center>
